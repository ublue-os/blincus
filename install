#!/bin/sh
# POSIX

next=0
verbose=0
version=0.2.0

# Print usage to stdout.
# Arguments:
#   None
# Outputs:
#   print usage with examples.
show_help() {
	cat << EOF
install --prefix /usr/local

Options:
	--prefix/-P:		base bath where all files will be deployed (default /usr/local if root, ~/.local if not)
	--next/-N:		install latest development version from git, instead of the latest stable release.
	--help/-h:		show this message
	-v:			show more verbosity
EOF
}

# Parse arguments
while :; do
	case $1 in
		-h | --help)
			# Call a "show_help" function to display a synopsis, then exit.
			show_help
			exit
			;;
		-v | --verbose)
			shift
			verbose=1
			;;
		-N | --next)
			shift
			next=1
			;;
		-P | --prefix)
			if [ -n "$2" ]; then
				prefix="$2"
				shift 
				shift
			fi
			;;
		*) # Default case: If no more options then break out of the loop.
			break ;;
	esac
done

if  [ -z "${prefix}" ]; then
	prefix="/usr/local"
	# in case we're not root, just default to the home directory
	if [ "$(id -u)" -ne 0 ]; then
		prefix="${HOME}/.local"
	fi
fi
dest_path="${prefix}/bin"
template_dest_path="${prefix}/share/blincus/templates"
template_config_dest_path="${HOME}/.config/blincus/templates"
build_dest_path="${prefix}/share/blincus/build"
build_config_dest_path="${HOME}/.config/blincus/build"
script_dest_path="${prefix}/share/blincus"
script_config_dest_path="${HOME}/.config/blincus"
man_dest_path="${prefix}/share/man/man1"
completion_dest_path="${prefix}/share/bash-completion/completions/"

set -o errexit
set -o nounset
# set verbosity
if [ "${verbose}" -ne 0 ]; then
	set -o xtrace
fi

# get current dir
curr_dir=$(dirname "$0")
cd "${curr_dir}" || exit 1

# if files are available, install files in dest directory
# else download targz and uncompress it
if [ -e "${curr_dir}/blincus" ]; then

	printf >&2 "Installing to %s\n" "${dest_path}"
	for file in blincus*; do
		if ! install -D -m 0755 -t "${dest_path}" "${file}"; then
			printf >&2 "Do you have permission to write to %s?\n" "${dest_path}"
			exit 1
		fi
	done
	if [ -e "man" ]; then
		mkdir -p "${man_dest_path}"
		for file in man/man1/*; do
			install -D -m 0644 -t "${man_dest_path}" "${file}"
		done
	fi
	if [ -e "completions" ]; then
		mkdir -p "${completion_dest_path}"
		for file in completions/*; do
			install -D -m 0644 -t "${completion_dest_path}" "${file}"
		done
	fi
	if [ -e "scripts" ]; then
		mkdir -p "${script_dest_path}"
		cp -R scripts "${script_dest_path}"

		if [ -d $script_config_dest_path/scripts ]; then
			printf >&2 "\033[0m Refusing to overwrite user scripts at \033[1;31m%s\n\033[0m" "${script_config_dest_path}/scripts"
			printf >&2 "\033[0m\033[1;31m   Updated scripts available at %s\n\033[0m" "${script_dest_path}/scripts"

		else
			mkdir -p "${script_config_dest_path}"
			cp -R scripts "${script_config_dest_path}"
		fi


	fi
	if [ -e "instances" ]; then
		mkdir -p "${template_dest_path}"
		for file in instances/*; do
			install -D -m 0644 -t "${template_dest_path}" "${file}"
		done
		if [ -d $template_config_dest_path ]; then
			printf >&2 "\033[0m Refusing to overwrite user templates at \033[1;31m%s\n\033[0m" "${template_config_dest_path}"
			printf >&2 "\033[0m\033[1;31m   Updated templates available at %s\n\033[0m" "${template_dest_path}"

		else
			mkdir -p "${template_config_dest_path}"
			for file in instances/*; do
				install -D -m 0644 -t "${template_config_dest_path}" "${file}"
			done
		fi

	fi

	if [ -e "build" ]; then
		mkdir -p "${build_dest_path}"
		for file in build/*; do
			install -D -m 0644 -t "${build_dest_path}" "${file}"
		done
		if [ -d $build_config_dest_path ]; then
			printf >&2 "\033[0m Refusing to overwrite user build templates at \033[1;31m%s\n\033[0m" "${build_config_dest_path}"
			printf >&2 "\033[0m\033[1;31m   Updated build templates available at %s\n\033[0m" "${build_dest_path}"

		else
			mkdir -p "${build_config_dest_path}"
			for file in build/*; do
				install -D -m 0644 -t "${build_config_dest_path}" "${file}"
			done
			mkdir -p "${build_config_dest_path}"/sources
			touch "${build_config_dest_path}"/sources/tailscale
			

		fi

	fi
else
	printf >&2 "\033[1;31m Checking dependencies...\n\033[0m"
	# check that we have base dependencies
	if ! { command -v curl > /dev/null || command -v wget > /dev/null; } || ! command -v tar > /dev/null; then
		printf >&2 "Online install depends on tar and either curl or wget\n"
		printf >&2 "Ensure you have all dependencies installed.\n"
		exit 1
	fi

	if command -v curl > /dev/null 2>&1; then
		download="curl -sLo"
	elif command -v wget > /dev/null 2>&1; then
		download="wget -qO"
	fi

	printf >&2 "\033[1;31m Downloading...\n\033[0m"
	if [ "${next}" -eq 0 ]; then
		release_ver="ublue-os/blincus/archive/refs/tags/${version}.tar.gz"
		release_name=$(basename "${release_ver}")
	else
		release_ver="ublue-os/blincus/archive/refs/heads/main.tar.gz"
		release_name="main"
	fi
	# go in tmp
	tmp_dir="$(mktemp -d)"
	cd "${tmp_dir}"
	# download our target
	${download} "${release_name}" "https://github.com/${release_ver}"
	# uncompress
	printf >&2 "\033[1;31m Unpacking...\n\033[0m"
	if [ "${verbose}" -ne 0 ]; then
		tar xvf "${release_name}"
	else
		tar xf "${release_name}"
	fi
	# deploy our files
	for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/blincus*; do
		if ! install -D -m 0755 -t "${dest_path}" "${file}"; then
			printf >&2 "Do you have permission to write to %s?\n" "${dest_path}"
			exit 1
		fi
	done
	if [ -e "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')/man/" ]; then
		for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/man/man1/*; do
			install -D -m 0644 -t "${man_dest_path}" "${file}"
		done
	fi
	if [ -e "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')/completions/" ]; then
		for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/completions/*; do
			install -D -m 0644 -t "${completion_dest_path}" "${file}"
		done
	fi
	if [ -e "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')/scripts/" ]; then
		mkdir -p "${script_dest_path}"
		cp -R "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/scripts "${script_dest_path}"
		if [ -d $script_config_dest_path/scripts ]; then
			printf >&2 "\033[0m Refusing to overwrite user scripts at \033[1;31m%s\n\033[0m" "${script_config_dest_path}/scripts"
			printf >&2 "\033[0m\033[1;31m   Updated scripts available at %s\n\033[0m" "${script_dest_path}/scripts"

		else
			mkdir -p "${script_config_dest_path}"
			cp -R "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/scripts "${script_config_dest_path}"
		fi
	fi
	if [ -e "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')/instances/" ]; then
		mkdir -p "${template_dest_path}"
		for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/instances/*; do
			install -D -m 0644 -t "${template_dest_path}" "${file}"
		done

		if [ -d $template_config_dest_path ]; then
			printf >&2 "\033[0m Refusing to overwrite user templates at \033[1;31m%s\n\033[0m" "${template_config_dest_path}"
			printf >&2 "\033[0m\033[1;31m   Updated templates available at %s\n\033[0m" "${template_dest_path}"

		else
			mkdir -p "${template_config_dest_path}"
			for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/instances/*; do
				install -D -m 0644 -t "${template_config_dest_path}" "${file}"
			done
		fi

	fi

	if [ -e "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')/build/" ]; then
		mkdir -p "${build_dest_path}"
		for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/build/*; do
			install -D -m 0644 -t "${build_dest_path}" "${file}"
		done

		if [ -d $build_config_dest_path ]; then
			printf >&2 "\033[0m Refusing to overwrite user build templates at \033[1;31m%s\n\033[0m" "${build_config_dest_path}"
			printf >&2 "\033[0m\033[1;31m   Updated build templates available at %s\n\033[0m" "${template_dest_path}"

		else
			mkdir -p "${build_config_dest_path}"
			for file in "blincus-$(echo "${release_name}" | sed 's/.tar.gz//g')"/build/*; do
				install -D -m 0644 -t "${build_config_dest_path}" "${file}"
			done
		fi

	fi

	# securely delete unneeded files
	cd
	if [ -n "${tmp_dir}" ] && [ -e "${tmp_dir}" ]; then
		rm -rf "${tmp_dir}"
	fi
fi

[ ! -w "${dest_path}" ] && printf >&2 "Cannot write into %s, permission denied.\n" "${dest_path}" && exit 1
#[ ! -w "${man_dest_path}" ] && printf >&2 "Cannot write into %s, permission denied.\n" "${man_dest_path}" && exit 1

printf >&2 "\033[1;32m Installation successful!\n\033[0m"
printf >&2 "\033[0m Blincus command installed at \033[1;31m%s\n\033[0m" "${dest_path}"
printf >&2 "\033[0m Templates are located in \033[1;31m%s\n\033[0m" "${template_config_dest_path}"

if ! echo "${PATH}" | grep -q "${dest_path}"; then
	printf >&2 "\033[0m Be sure that \033[1;31m%s\033[0m is in your \033[1;31m\$PATH\033[0m environment variable to be able to use blincus without specifying the full path.\n\033[0m" "${dest_path}"
fi

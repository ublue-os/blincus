#!/usr/bin/env bash
# This script was generated by bashly 1.1.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
blincus_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus\n"
    echo

    printf "  Manage development containers with Incus\n  \n  Wraps the \`incus\` command, so commands not implemented \n  in blincus will pass through to \`incus\`.\n"
    echo

  else
    printf "blincus - Manage development containers with Incus\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus COMMAND\n"
  printf "  blincus [COMMAND] --help | -h\n"
  printf "  blincus --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Manage blincus config\n" "$(green "config")     "
  printf "  %s   Launch a new instance\n" "$(green "launch")     "
  printf "  %s   Open a shell in an instance\n" "$(green "shell")      "
  printf "  %s   Manage blincus templates\n" "$(green "template")   "
  printf "  %s   Build custom images with packer\n" "$(green "packer")     "
  printf "  %s   Personalize included templates\n" "$(green "personalize")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "CONFIG_FILE")"
    printf "    Location of blincus config.ini\n"
    printf "    Default: $HOME/.config/blincus/config.ini\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.usage
blincus_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config - Manage blincus config\n"
    echo

  else
    printf "blincus config - Manage blincus config\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config COMMAND\n"
  printf "  blincus config [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Save a value in the config file\n" "$(green "set") "
  printf "  %s   Read a value from the config file\n" "$(green "get") "
  printf "  %s   Show all values\n" "$(green "list")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.usage
blincus_config_set_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config set - Save a value in the config file\n"
    echo

  else
    printf "blincus config set - Save a value in the config file\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config set KEY VALUE\n"
  printf "  blincus config set --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "KEY")"
    printf "    Config key\n"
    echo

    # :argument.usage
    printf "  %s\n" "$(blue "VALUE")"
    printf "    Config value\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus set engine lxd\n"
    printf "  blincus set fedora.latest 40\n"
    echo

  fi
}

# :command.usage
blincus_config_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config get - Read a value from the config file\n"
    echo

  else
    printf "blincus config get - Read a value from the config file\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config get KEY\n"
  printf "  blincus config get --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "KEY")"
    printf "    Config key\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus get engine\n"
    printf "  blincus get default_release\n"
    echo

  fi
}

# :command.usage
blincus_config_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config list - Show all values\n"
    echo

  else
    printf "blincus config list - Show all values\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config list\n"
  printf "  blincus config list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
blincus_launch_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus launch\n"
    echo

    printf "  Launch a new instance\n  Use \`blincus template list\` to see a list of available templates.\n"
    echo

  else
    printf "blincus launch - Launch a new instance\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus launch NAME [OPTIONS]\n"
  printf "  blincus launch --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--template, -t TEMPLATE (required)")"
    printf "    Blincus template name \n    Use \`blincus template list\` to see available templates\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--persist, -p LOCATION")"
    printf "    Persist instance $HOME to location on the host\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--vm, -v SIZE")"
    printf "    Run as a virtual machine with AWS \"t3\" style sizes\n"
    printf "    Allowed: nano, micro, small, medium, large, xlarge, 2xlarge\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "NAME")"
    printf "    Instance name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus launch -t ubuntu mydevctr\n"
    printf "  blincus launch -t ubuntux mydevctr\n"
    printf "  blincus launch -t fedora mydevmachine\n"
    printf "  blincus launch --vm large -t ubuntu myfatvm\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.usage
blincus_shell_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus shell - Open a shell in an instance\n"
    echo

  else
    printf "blincus shell - Open a shell in an instance\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus shell NAME [OPTIONS]\n"
  printf "  blincus shell --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--root, -r")"
    printf "    Root shell\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--no-login, -n")"
    printf "    Don't use a login shell\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "NAME")"
    printf "    Instance name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus shell mydevctr --login\n"
    printf "  blincus shell mydevctr --root --no-login\n"
    printf "  blincus shell mydevctr\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.usage
blincus_template_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template - Manage blincus templates\n"
    echo

  else
    printf "blincus template - Manage blincus templates\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template COMMAND\n"
  printf "  blincus template [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Edit a template\n" "$(green "edit")   "
  printf "  %s   List all templates\n" "$(green "list")   "
  printf "  %s   Restore default templates\n" "$(green "restore")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.usage
blincus_template_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template edit - Edit a template\n"
    echo

  else
    printf "blincus template edit - Edit a template\n"
    echo

  fi

  printf "Alias: e\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template edit NAME\n"
  printf "  blincus template edit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "NAME")"
    printf "    Template name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus template edit ubuntu\n"
    echo

  fi
}

# :command.usage
blincus_template_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template list - List all templates\n"
    echo

  else
    printf "blincus template list - List all templates\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template list [OPTIONS]\n"
  printf "  blincus template list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--completions, -c")"
    printf "    output as list for completions\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
blincus_template_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template restore - Restore default templates\n"
    echo

  else
    printf "blincus template restore - Restore default templates\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template restore\n"
  printf "  blincus template restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
blincus_packer_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus packer - Build custom images with packer\n"
    echo

  else
    printf "blincus packer - Build custom images with packer\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus packer COMMAND\n"
  printf "  blincus packer [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Build an image, requires \`packer\` and \`packer-plugin-incus\`\n" "$(green "build")   "
  printf "  %s   Build all defined packer images, requires \`packer\` and \`packer-plugin-incus\`\n" "$(green "buildall")"
  printf "  %s   List all packer recipes\n" "$(green "list")    "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.usage
blincus_packer_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus packer build - Build an image, requires \`packer\` and \`packer-plugin-incus\`\n"
    echo

  else
    printf "blincus packer build - Build an image, requires \`packer\` and \`packer-plugin-incus\`\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus packer build NAME\n"
  printf "  blincus packer build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "NAME")"
    printf "    Template name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus packer build jammy\n"
    echo

  fi
}

# :command.usage
blincus_packer_buildall_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus packer buildall - Build all defined packer images, requires \`packer\` and \`packer-plugin-incus\`\n"
    echo

  else
    printf "blincus packer buildall - Build all defined packer images, requires \`packer\` and \`packer-plugin-incus\`\n"
    echo

  fi

  printf "Alias: a\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus packer buildall\n"
  printf "  blincus packer buildall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus packer buildall\n"
    echo

  fi
}

# :command.usage
blincus_packer_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus packer list - List all packer recipes\n"
    echo

  else
    printf "blincus packer list - List all packer recipes\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus packer list [OPTIONS]\n"
  printf "  blincus packer list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--completions, -c")"
    printf "    output as list for completions\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
blincus_personalize_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus personalize - Personalize included templates\n"
    echo

  else
    printf "blincus personalize - Personalize included templates\n"
    echo

  fi

  printf "Alias: p\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus personalize\n"
  printf "  blincus personalize --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus personalize\n"
    echo

    # :command.footer
    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/config.sh
config_show() {
  config_load
  ini_show
}

config_get() {
  local key="${1-}"
  local default_value="${2-}"

  config_load
  echo "${ini["$key"]:-$default_value}"
}

config_set() {
  local key="${1-}"
  shift
  local value="$*"

  config_load
  ini["$key"]="$value"
  config_save
}

config_del() {
  local key="${1-}"

  config_load
  unset "ini[$key]"
  config_save
}

config_keys() {
  config_load
  ini_keys
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

config_reload() {
  declare -g config_loaded=false
  config_load
}

config_load() {
  [[ "${config_loaded-}" == "true" ]] && return

  declare -g CONFIG_FILE=${CONFIG_FILE:=config.ini}
  declare -g config_loaded=true
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
  ini_load "$CONFIG_FILE"
}

config_save() {
  ini_save "$CONFIG_FILE"
}

# src/lib/dconfig.sh
prompt_create_profile() {
	# create a Prompt profile using dconf given the guid of the instance
	# $1 = guid
	# $2 = name

	# dconf read /org/gnome/Prompt/Profiles/d092b3519698570a3252762c658f7629/
	# /org/gnome/Prompt/Profiles/d092b3519698570a3252762c658f7629/custom-command
	#   'blincus shell myubuntu'
	# /org/gnome/Prompt/Profiles/d092b3519698570a3252762c658f7629/label
	#   'myubuntu'
	# /org/gnome/Prompt/Profiles/d092b3519698570a3252762c658f7629/login-shell
	#   true
	# /org/gnome/Prompt/Profiles/d092b3519698570a3252762c658f7629/use-custom-command
	#   true

	# if dconf doesn't exist, just return
	if ! command -v dconf >/dev/null; then
		return
	fi

	local guid=$1
	local name=$2

	local profile="/org/gnome/Prompt/Profiles/${guid}/"

	dconf write "${profile}custom-command" "'blincus shell ${name}'"
	dconf write "${profile}label" "'${name}'"
	dconf write "${profile}login-shell" "true"
	dconf write "${profile}use-custom-command" "true"

	prompt_add_profile "$guid"

}

prompt_add_profile() {
	# Read the current value of the array
	CURRENT_VALUE=$(dconf read /org/gnome/Prompt/profile-uuids)
	local guid=$1

	# remove the leading and trailing brackets
	CURRENT_VALUE=${CURRENT_VALUE:1:-1}

	# remove any spaces
	CURRENT_VALUE=${CURRENT_VALUE// /}

	# split the string into an array
	IFS=',' read -r -a array <<<"$CURRENT_VALUE"

	# add the new value
	array+=("'$guid'")

	# join the array back into a string
	UPDATED_VALUE=$(printf "%s," "${array[@]}")

	# remove the trailing comma
	UPDATED_VALUE=${UPDATED_VALUE%?}

	# add the leading and trailing brackets
	UPDATED_VALUE="[$UPDATED_VALUE]"

	# Write the updated array back to dconf
	dconf write /org/gnome/Prompt/profile-uuids "$UPDATED_VALUE"

}

prompt_reconcile() {
	# ensure that the prompt profiles for deleted instances are removed

	# if dconf doesn't exist, just return
	if ! command -v dconf >/dev/null; then
		return
	fi

	# Read the current value of the array
	CURRENT_VALUE=$(dconf read /org/gnome/Prompt/profile-uuids)

	# remove the leading and trailing brackets
	CURRENT_VALUE=${CURRENT_VALUE:1:-1}

	# remove any spaces
	CURRENT_VALUE=${CURRENT_VALUE// /}

	# split the string into an array
	IFS=',' read -r -a array <<<"$CURRENT_VALUE"

	# loop through the array and remove any that don't exist
	for i in "${!array[@]}"; do
		guid=${array[i]}

		# remove single quotes from guid

		guid=${guid//\'/}

		#echo "Checking profile for $(red $guid)"
		local profile="/org/gnome/Prompt/Profiles/${guid}/"

		custom_shell=$(dconf read "${profile}custom-command")

		if [[ $custom_shell == *"blincus"* ]]; then
			#echo "Profile $(red $guid) is a Blincus profile"
			#echo "Custom shell: $custom_shell"

			# check if the instance exists
			local name=$(dconf read "${profile}label")
			name=${name//\'/}
			#echo --"$name"--
			#echo "Profile $(red $guid) is for instance $(red $name)"
			if ! incus list | grep -qw "$name"; then
				#echo "Instance $(red $name) does not exist. Removing profile $(red $guid)"
				# remove the profile
				dconf reset -f "${profile}"
				# remove the guid from the array
				unset 'array[i]'
				# join the array back into a string
				UPDATED_VALUE=$(printf "%s," "${array[@]}")

				# remove the trailing comma
				UPDATED_VALUE=${UPDATED_VALUE%?}

				# add the leading and trailing brackets
				UPDATED_VALUE="[$UPDATED_VALUE]"

				#echo "UPDATED_VALUE: $UPDATED_VALUE"

				# Write the updated array back to dconf
				dconf write /org/gnome/Prompt/profile-uuids "$UPDATED_VALUE"
			fi

		fi

	done

	for image in $(blincus_instances); do
		local iprofile="/org/gnome/Prompt/Profiles/${image}/"
		icustom_shell=$(dconf read "${iprofile}custom-command")
		if [ -z "$icustom_shell" ]; then
			prompt_create_profile "$image" "$(blincus_instance_name "$image")"
		fi

	done

}

# src/lib/defaults.sh
write_defaults() {

	# default container engine
	config_set "engine" "incus"

	# ubuntu defaults
	config_set "ubuntu.image" "images:ubuntu/jammy/cloud"
	config_set "ubuntu.scripts" "ubuntu"

	config_set "ubuntux.image" "images:ubuntu/jammy/cloud"
	config_set "ubuntux.scripts" "ubuntu"
	# debian defaults
	config_set "debian.image" "images:debian/bookworm/cloud"
	config_set "debian.scripts" "debian"

	config_set "debianx.image" "images:debian/bookworm/cloud"
	config_set "debianx.scripts" "debian"

	#fedora defaults
	config_set "fedora.image" "images:fedora/39/cloud"
	config_set "fedora.scripts" "fedora"

	config_set "fedorax.image" "images:fedora/39/cloud"
	config_set "fedorax.scripts" "fedora"

	# nix defaults

	config_set "nix.image" "images:ubuntu/jammy/cloud"
	config_set "nix.scripts" "nix"
	# todo: flag or JIT set this
	# xhost +
}

# src/lib/incus.sh
blincus_instances() {
	incus ls --format json | jq -r '.[] | select(.config."user.blincusuid" != null) | .config."user.blincusuid"'
}

blincus_instance_name() {
	local guid=$1
	incus ls --format json | jq -r '.[] | select(.config."user.blincusuid" == "'"$guid"'") | .name'
}

blincus_get_property() {
	local image=$1
	local property=$2
	incus image get-property "$1" "$2"
}

# src/lib/ini.sh
ini_load() {
  declare -gA ini

  local ini_file="$1"

  local section=""
  local key=""
  local value=""
  local section_regex="^\[(.+)\]"
  local key_regex="^([^ =]+) *= *(.*) *$"
  local comment_regex="^;"

  while IFS= read -r line; do
    if [[ $line =~ $comment_regex ]]; then
      continue
    elif [[ $line =~ $section_regex ]]; then
      section="${BASH_REMATCH[1]}."
    elif [[ $line =~ $key_regex ]]; then
      key="${BASH_REMATCH[1]}"
      value="${BASH_REMATCH[2]}"
      [[ $value == *\$* ]] && eval "value=\"$value\""
      ini["${section}${key}"]="$value"
    fi
  done <"$ini_file"
}

ini_save() {
  declare -gA ini

  local ini_file="$1"

  local current_section=""
  local has_free_keys=false

  rm -f "$ini_file"

  for key in $(ini_keys); do
    [[ $key == *.* ]] && continue
    has_free_keys=true
    value="${ini[$key]}"
    echo "$key = $value" >>"$ini_file"
  done

  [[ "${has_free_keys}" == "true" ]] && echo >>"$ini_file"

  for key in $(ini_keys); do
    [[ $key == *.* ]] || continue
    value="${ini[$key]}"
    IFS="." read -r section_name key_name <<<"$key"

    if [[ "$current_section" != "$section_name" ]]; then
      [[ $current_section ]] && echo >>"$ini_file"
      echo "[$section_name]" >>"$ini_file"
      current_section="$section_name"
    fi

    echo "$key_name = $value" >>"$ini_file"
  done
}

ini_show() {
  declare -gA ini

  for key in $(ini_keys); do
    echo "$key = ${ini[$key]}"
  done
}

ini_keys() {
  declare -gA ini

  local keys=("${!ini[@]}")
  for a in "${keys[@]}"; do echo "$a"; done | sort
}

# src/lib/packer.sh
image_id() {
	local build=$1
	local manifest=$2
	#echo "build: $build"
	cfgdir=$(dirname "${CONFIG_FILE}")
	workdir="${cfgdir}/packer"
	img_id=$(jq -r '.builds[] | select(.name=="'"$build"'") | .artifact_id' "$workdir/$manifest.json")
	echo "$img_id"

}

image_alias() {
	local build=$1
	local manifest=$2
	#echo "build: $build"
	cfgdir=$(dirname "${CONFIG_FILE}")
	workdir="${cfgdir}/packer"
	img_id=$(jq -r '.builds[] | select(.name=="'"$build"'") | .custom_data.alias' "$workdir/$manifest.json")
	echo "$img_id"

}

unique_builds() {
	local build=$1
	cfgdir=$(dirname "${CONFIG_FILE}")
	workdir="${cfgdir}/packer"
	builds=$(jq -r '.builds| group_by(.name) | .[][-1] | .name' "$workdir/$1.json")
	# return builds as an array
	echo "$builds"
}

plugin() {
	# check for packer plugin
	found=$(packer plugins installed | grep -q "incus" && echo "true" || echo "false")

	if [ "$found" == "false" ]; then
		echo "Installing packer plugin"
		packer plugins install github.com/bketelsen/incus
	fi

}

packer_build() {
	cfgdir=$(dirname "${CONFIG_FILE}")
	name=$1
	recipe="${cfgdir}/packer/${name}.pkr.hcl"
	if [ ! -f "${recipe}" ]; then
		echo "ERROR: recipe file not found: ${recipe}"
		exit 1
	fi

	workdir="${cfgdir}/packer"
	pushd "${workdir}" >/dev/null
	packer build --force "${name}.pkr.hcl"
	popd >/dev/null

	ubuilds=$(unique_builds "${name}")
	for build in ${ubuilds}; do
		echo ""
		echo "$(blue Build:) ${build}"
		img_id=$(image_id "${build}" "${name}")
		echo "  $(blue fingerprint:) ${img_id}"
		alias=$(image_alias "${build}" "${name}")
		echo "  $(blue alias:) ${alias}"
		tmplt=$(blincus_get_property "${img_id}" "template")
		echo "  $(blue template:) ${tmplt}"
		scrpts=$(blincus_get_property "${img_id}" "scripts")
		echo "  $(blue scripts:) ${scrpts}"

		# ensure sourcetemplate exists
		if [ ! -e "${cfgdir}/templates/${tmplt}.config.yaml" ]; then
			echo "Source template $(red ${tmplt}) does not exist"
			exit 1
		fi
		# ensure scriptdir exists
		if [ ! -e "${cfgdir}/scripts/${scrpts}" ]; then
			echo "Script directory $(red ${scrpts}) does not exist"
			exit 1
		fi

		local imageref
		# if alias is set, use it
		if [ -n "${alias}" ]; then
			imageref="${alias}"
		else
			imageref="${img_id}"
		fi

		# Create config values for this image
		config_set "packer-${name}.image" "${imageref}"
		config_set "packer-${name}.scripts" "${scrpts}"

		# copy image template
		cp "${cfgdir}/templates/${tmplt}.config.yaml" "${cfgdir}/templates/packer-${name}.config.yaml"

	done
}

# src/lib/personalize.sh
personalize() {

	cfgdir=$(dirname "${CONFIG_FILE}")

	template_path="${cfgdir}/templates"
	packer_path="${cfgdir}/packer"

	shopt -s globstar

	for file in $template_path/*.config.yaml; do

		fullname=$(getent passwd "$USER" | cut -d ':' -f 5)
		sed -i "s/BLINCUSUSER/$USER/g" "$file"
		sed -i "s/BLINCUSFULLNAME/$fullname/g" "$file"

		# if we're running on WSL we need to remove the gecos line from the config
		# https://wsl.dev/wslblincus/
		if grep -qE "(Microsoft|WSL)" /proc/version &>/dev/null; then
			sed -i 's/gecos/#gecos/g' "$file"
		fi

		# I don't know a better way to get the first file
		for i in "$HOME"/.ssh/id*.pub; do
			[ -f "$i" ] || break
			contents=$(cat "$i")
			sed -i "s|SSHKEY|$contents|g" "$file"
			break

		done
	done

	for file in $packer_path/* $packer_path/**/*; do

		# if it's not a directory
		if ! [ -d "$file" ]; then
			fullname=$(getent passwd "$USER" | cut -d ':' -f 5)
			sed -i "s/BLINCUSUSER/$USER/g" "$file"
			sed -i "s/BLINCUSFULLNAME/$fullname/g" "$file"

			# if we're running on WSL we need to remove the gecos line from the config
			# https://wsl.dev/wslblincus/
			if grep -qE "(Microsoft|WSL)" /proc/version &>/dev/null; then
				sed -i 's/gecos/#gecos/g' "$file"
			fi

			# I don't know a better way to get the first file
			for i in "$HOME"/.ssh/id*.pub; do
				[ -f "$i" ] || break
				contents=$(cat "$i")
				sed -i "s|SSHKEY|$contents|g" "$file"
				break

			done
		fi
	done

}

# src/lib/prefix.sh
prefix() {
	# find the path where `blincus` is located and use that as the prefix
	# default to /usr/local if not found
	local prefix
	prefix=$(dirname "$(dirname "$(command -v blincus)")")
	[ -z "${prefix}" ] && prefix="/usr/local"
	echo "${prefix}"
}

# src/lib/sanity.sh
sanity() {
	local errors

	if ! grep -q 'root:1000:1' /etc/subgid; then
		errors=1
		echo "Error: 'root:1000:1' missing from /etc/subgid"
		echo "To resolve run:"
		echo 'echo "root:1000:1" | sudo tee -a /etc/subuid /etc/subgid'
	fi

	if ! grep -q 'root:1000:1' /etc/subuid; then
		errors=1
		echo "Error: 'root:1000:1' missing from /etc/subuid"
		echo "To resolve run:"
		echo 'echo "root:1000:1" | sudo tee -a /etc/subuid /etc/subgid'
	fi

	if ! groups $USER | grep -qw 'incus-admin'; then
		errors=1
		echo "Error: User does not belong to 'incus-admin' group."
		echo "To resolve run:"
		echo 'sudo usermod -aG $USER'
	fi
	if ((errors > 0)); then
		echo "$(red Sanity check failed.)"
		echo "$(yellow See documentation at https://blincus.dev)"
		exit 1
	fi
}

# src/lib/uuid.sh
uuid() {
	uuidgen | sed 's/-//g'
}

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# src/lib/yaml.sh
yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

# :command.command_functions

# :command.function
blincus_config_set_command() {
  # src/config_set_command.sh
  # Using the standard library (lib/config.sh) to store a value to the config
  config_set "${args[key]}" "${args[value]}"
  config_show

}

# :command.function
blincus_config_get_command() {
  # src/config_get_command.sh
  key="${args[key]}"
  if config_has_key "$key"; then
  	config_get "$key"
  else
  	echo "No such key: $key"
  fi

}

# :command.function
blincus_config_list_command() {
  # src/config_list_command.sh
  for key in $(config_keys); do
  	echo "$key: $(config_get "$key")"
  done

}

# :command.function
blincus_launch_command() {
  # src/launch_command.sh
  nomount=${args[--no - mount]}
  cfgdir=$(dirname "${CONFIG_FILE}")
  name=${args[name]}
  template=${args[--template]}
  persist=${args[--persist]}
  vm=${args[--vm]}
  vmflag=""
  sizeflag=""
  if [[ ! -z "${vm}" ]]; then
  	vmflag="--vm"
  	sizeflag="--type t3.${vm}"
  fi

  profilelist=$(config_get arraytest.profiles)
  IFS=,
  read line <<<$profilelist
  profiles=($line)
  shopt -s extglob
  profileline='--profile default'
  for each in "${profiles[@]}"; do
  	profileline+=" --profile "
  	profileline+="${each##*( )}"
  done
  echo "${profileline}"
  exit 0

  image=$(config_get ${template}.image)

  config="${cfgdir}/templates/${template}"
  echo "Using $(blue ${template}) template"
  incus init "${image}" "${args[name]}" "${vmflag}" "${sizeflag}" <"${config}.config.yaml"

  if [[ ! -z "${persist}" ]]; then
  	echo "$(yellow_bold Persisting home directories for $name at $persist)"
  	mkdir -p "$persist"
  	incus config device add "${args[name]}" persistdir disk source="$persist" path=/home
  fi

  echo "$(yellow Starting instance $name)"
  # add our useful scripts
  # mount or copy scripts

  scripts=$(config_get ${template}.scripts)
  scriptdir="${cfgdir}/scripts/${scripts}"
  if [[ ! "${vm}" ]]; then
  	# copy scripts
  	echo "$(yellow_bold Copying scripts from $HOME/.blincus/scripts)"
  	incus file push -r -p "$HOME"/.blincus/scripts/* "$name"/opt/scripts/
  	echo "copied"
  fi

  # now start it
  incus start "${args[name]}"

  echo "$(yellow Waiting for cloud init...)"

  if [[ "${vm}" ]]; then
  	sleep 10
  fi
  # wait for cloud-init to create the user
  # otherwise the home mount will prevent /etc/skel from being applied
  incus exec "${args[name]}" -- bash -c "command -v cloud-init && cloud-init status --wait || echo No cloud-init"

  TMPFILE=$(mktemp)
  echo " * Blincus instance: $(red $name)" >$TMPFILE
  echo " * Template: $(red $template)" >>$TMPFILE
  echo " * Image: $(red $image)" >>$TMPFILE
  echo " * Helper Scripts: $(red /opt/scripts)" >>$TMPFILE
  echo " " >>$TMPFILE

  incus file push $TMPFILE "$name"/etc/blincus
  MOTDPROFILE=$(mktemp)
  echo "cat /etc/blincus" >$MOTDPROFILE

  incus file push $MOTDPROFILE "$name"/etc/profile.d/02-blincus.sh
  guid=$(uuid)
  echo "Blincus ID: $(yellow $guid)"
  incus config set "$name" user.blincusuid=$guid

  prompt_create_profile "$guid" "$name"

  # mount $HOME at $HOME/host

  if [[ ! $nomount ]]; then
  	echo "$(yellow Mounting home directory)"
  	incus config device add "${args[name]}" myhomedir disk source="$HOME" path=/home/"${USER}"/host/
  fi
  if [[ ! -z "${DISPLAY}" ]]; then
  	echo "$(yellow_bold Allowing X sharing:)"
  	xhost +
  fi
  echo "$(green_bold Instance $name ready)"
  echo "Run $(magenta_bold blincus shell $name) to enter"

}

# :command.function
blincus_shell_command() {
  # src/shell_command.sh
  root=${args[--root]}
  nologin=${args[--no - login]}
  container=${args[name]}
  shelluser=${USER}
  loginflag="--login"

  if [[ $root ]]; then
  	shelluser="root"
  fi
  if [[ $nologin ]]; then
  	loginflag=""
  fi

  incus exec "$container" -- su ${loginflag} ${shelluser}

}

# :command.function
blincus_template_edit_command() {
  # src/template_edit_command.sh
  cfgdir=$(dirname "${CONFIG_FILE}")

  template_path="${cfgdir}/templates"
  $EDITOR ${template_path}/${args[name]}.config.yaml

}

# :command.function
blincus_template_list_command() {
  # src/template_list_command.sh
  comp=${args[--completions]}

  cfgdir=$(dirname "${CONFIG_FILE}")

  template_path="${cfgdir}/templates"

  if [[ $comp ]]; then
  	templates=()
  	for file in $template_path/*.config.yaml; do
  		name="$(basename "${file}" .config.yaml)"
  		templates+=($name)
  	done
  	echo ${templates[@]}
  	return
  fi

  for file in $template_path/*.config.yaml; do
  	name="$(basename "${file}" .config.yaml)"
  	echo "$(blue_bold $name)"
  	echo "  $(grep "description" ${file})"

  done

}

# :command.function
blincus_template_restore_command() {
  # src/template_restore_command.sh
  cfgdir=$(dirname "${CONFIG_FILE}")

  template_path="${cfgdir}/templates"
  packer_path="${cfgdir}/packer"

  baseDir="$(prefix)/share/blincus"
  templateDir="${baseDir}/templates"
  packerDir="${baseDir}/packer"

  echo ""
  echo "$(green Installer base directory:) $baseDir"
  echo ""
  echo "$(blue Installer template directory:) $templateDir"
  echo "$(blue User template directory:) $template_path"
  echo ""
  echo "$(red To restore a template copy the template from the installer directory to the user directory)"
  echo ""
  echo ""
  echo "$(magenta Installer packer template directory:) $packerDir"
  echo "$(magenta User packer template directory:) $packer_path"
  echo ""
  echo "$(red To restore a packer template copy the template from the installer directory to the user directory)"

}

# :command.function
blincus_packer_build_command() {
  # src/packer_build_command.sh
  name=${args[name]}

  # make sure we have the packer plugin
  plugin

  # make sure the templates are personalized
  personalize

  # build the packer image
  packer_build $name

}

# :command.function
blincus_packer_buildall_command() {
  # src/packer_buildall_command.sh
  cfgdir=$(dirname "${CONFIG_FILE}")

  personalize

  packer_path="${cfgdir}/packer"

  for file in $packer_path/*.pkr.hcl; do
  	name="$(basename "${file}" .pkr.hcl)"
  	echo ""
  	echo "Found definition $(red_bold $name):"
  	packer_build $name

  done

}

# :command.function
blincus_packer_list_command() {
  # src/packer_list_command.sh
  comp=${args[--completions]}

  cfgdir=$(dirname "${CONFIG_FILE}")

  packer_path="${cfgdir}/packer"

  if [[ $comp ]]; then
  	packers=()
  	for file in $packer_path/*.pkr.hcl; do
  		name="$(basename "${file}" .pkr.hcl)"
  		packers+=($name)
  	done
  	echo ${packers[@]}
  	return
  fi

  for file in $packer_path/*.pkr.hcl; do
  	name="$(basename "${file}" .pkr.hcl)"
  	echo "$(blue_bold $name)"
  	echo "$(grep "description" ${file})"

  done

}

# :command.function
blincus_personalize_command() {
  # src/personalize_command.sh
  echo ""
  echo "$(blue Personalizing templates.)"
  personalize
  echo "$(green Template personalization complete.)"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        blincus_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export CONFIG_FILE="${CONFIG_FILE:-$HOME/.config/blincus/config.ini}"

  env_var_names+=("CONFIG_FILE")

  # :command.dependencies_filter
  if command -v incus >/dev/null 2>&1; then
    deps['incus']="$(command -v incus | head -n1)"
  else
    printf "missing dependency: incus\n" >&2
    printf "%s\n" "incus is required to use blincus." >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    config)
      action="config"
      shift
      blincus_config_parse_requirements "$@"
      shift $#
      ;;

    launch | l)
      action="launch"
      shift
      blincus_launch_parse_requirements "$@"
      shift $#
      ;;

    shell | s)
      action="shell"
      shift
      blincus_shell_parse_requirements "$@"
      shift $#
      ;;

    template)
      action="template"
      shift
      blincus_template_parse_requirements "$@"
      shift $#
      ;;

    packer)
      action="packer"
      shift
      blincus_packer_parse_requirements "$@"
      shift $#
      ;;

    personalize | p)
      action="personalize"
      shift
      blincus_personalize_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      blincus_usage >&2
      exit 1
      ;;

    *)
      if [[ -x "$(command -v "incus")" ]]; then
        exec incus "$@"
      else
        printf "invalid command: %s\n" "$action" >&2
        exit 1
      fi
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    set | s)
      action="set"
      shift
      blincus_config_set_parse_requirements "$@"
      shift $#
      ;;

    get | g)
      action="get"
      shift
      blincus_config_get_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      blincus_config_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      blincus_config_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_config_set_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_set_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config set"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['key']+x} ]]; then

          args['key']=$1
          shift
        elif [[ -z ${args['value']+x} ]]; then

          args['value']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['key']+x} ]]; then
    printf "missing required argument: KEY\nusage: blincus config set KEY VALUE\n" >&2
    exit 1
  fi
  if [[ -z ${args['value']+x} ]]; then
    printf "missing required argument: VALUE\nusage: blincus config set KEY VALUE\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
blincus_config_get_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config get"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['key']+x} ]]; then

          args['key']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['key']+x} ]]; then
    printf "missing required argument: KEY\nusage: blincus config get KEY\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
blincus_config_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_launch_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_launch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="launch"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --template | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--template']="$2"
          shift
          shift
        else
          printf "%s\n" "--template requires an argument: --template, -t TEMPLATE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --persist | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--persist']="$2"
          shift
          shift
        else
          printf "%s\n" "--persist requires an argument: --persist, -p LOCATION" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --vm | -v)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--vm']="$2"
          shift
          shift
        else
          printf "%s\n" "--vm requires an argument: --vm, -v SIZE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus launch NAME [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--template']+x} ]]; then
    printf "missing required flag: --template, -t TEMPLATE\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ${args['--vm']:-} ]] && [[ ! ${args['--vm']:-} =~ ^(nano|micro|small|medium|large|xlarge|2xlarge)$ ]]; then
    printf "%s\n" "--vm must be one of: nano, micro, small, medium, large, xlarge, 2xlarge" >&2
    exit 1
  fi

}

# :command.parse_requirements
blincus_shell_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_shell_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="shell"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --root | -r)

        # :flag.case_no_arg
        args['--root']=1
        shift
        ;;

      # :flag.case
      --no-login | -n)

        # :flag.case_no_arg
        args['--no-login']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus shell NAME [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
blincus_template_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    edit | e)
      action="edit"
      shift
      blincus_template_edit_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      blincus_template_list_parse_requirements "$@"
      shift $#
      ;;

    restore | r)
      action="restore"
      shift
      blincus_template_restore_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      blincus_template_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_template_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="template edit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus template edit NAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
blincus_template_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="template list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --completions | -c)

        # :flag.case_no_arg
        args['--completions']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_template_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="template restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_packer_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_packer_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build | b)
      action="build"
      shift
      blincus_packer_build_parse_requirements "$@"
      shift $#
      ;;

    buildall | a)
      action="buildall"
      shift
      blincus_packer_buildall_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      blincus_packer_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      blincus_packer_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_packer_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_packer_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v packer >/dev/null 2>&1; then
    deps['packer']="$(command -v packer | head -n1)"
  else
    printf "missing dependency: packer\n" >&2
    printf "%s\n" "Install packer to use this command. https://developer.hashicorp.com/packer/install" >&2
    exit 1
  fi

  # :command.command_filter
  action="packer build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus packer build NAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
blincus_packer_buildall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_packer_buildall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v packer >/dev/null 2>&1; then
    deps['packer']="$(command -v packer | head -n1)"
  else
    printf "missing dependency: packer\n" >&2
    printf "%s\n" "Install packer to use this command. https://developer.hashicorp.com/packer/install" >&2
    exit 1
  fi

  # :command.command_filter
  action="packer buildall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_packer_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_packer_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="packer list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --completions | -c)

        # :flag.case_no_arg
        args['--completions']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
blincus_personalize_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_personalize_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="personalize"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.3.2"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export CONFIG_FILE="${CONFIG_FILE:-$HOME/.config/blincus/config.ini}"

  # src/initialize.sh
  cfgdir=$(dirname "${CONFIG_FILE}")
  [[ -d "$cfgdir" ]] || mkdir -p "$cfgdir"
  if ! test -f "${CONFIG_FILE:-}"; then
  	echo "$(yellow_bold Config file does not exist. Creating it with defaults.)"
  	echo "$(yellow_bold Disabling XAuth controls.)"
  	write_defaults
  	echo "--> Config file created at ${CONFIG_FILE}."
  fi

  if [ "$BLINCUS_SKIP_SANITY" != 1 ]; then
  	sanity
  fi
  #personalize
  prompt_reconcile

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "config") blincus_config_command ;;
    "config set") blincus_config_set_command ;;
    "config get") blincus_config_get_command ;;
    "config list") blincus_config_list_command ;;
    "launch") blincus_launch_command ;;
    "shell") blincus_shell_command ;;
    "template") blincus_template_command ;;
    "template edit") blincus_template_edit_command ;;
    "template list") blincus_template_list_command ;;
    "template restore") blincus_template_restore_command ;;
    "packer") blincus_packer_command ;;
    "packer build") blincus_packer_build_command ;;
    "packer buildall") blincus_packer_buildall_command ;;
    "packer list") blincus_packer_list_command ;;
    "personalize") blincus_personalize_command ;;
  esac
}

initialize
run "$@"

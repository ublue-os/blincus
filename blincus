#!/usr/bin/env bash
# This script was generated by bashly 1.1.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

blincus_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus\n"
    echo

    printf "  Manage development containers with Incus\n  \n  Wraps the \`incus\` command, so commands not implemented \n  in blincus will pass through to \`incus\`.\n"
    echo

  else
    printf "blincus - Manage development containers with Incus\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus COMMAND\n"
  printf "  blincus [COMMAND] --help | -h\n"
  printf "  blincus --version | -v\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Manage blincus config\n" "$(green "config")      "
  printf "  %s   Launch a new instance\n" "$(green "launch")      "
  printf "  %s   Open a shell in an instance\n" "$(green "shell")       "
  printf "  %s   Manage blincus templates\n" "$(green "template")    "
  printf "  %s   Build custom images with distrobuilder\n" "$(green "custom-image")"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    printf "%s\n" "$(bold "Environment Variables:")"

    printf "  %s\n" "$(cyan "CONFIG_FILE")"
    printf "    Location of blincus config.ini\n"
    printf "    Default: $HOME/.config/blincus/config.ini\n"
    echo

    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

blincus_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config - Manage blincus config\n"
    echo

  else
    printf "blincus config - Manage blincus config\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config COMMAND\n"
  printf "  blincus config [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Save a value in the config file\n" "$(green "set") "
  printf "  %s   Read a value from the config file\n" "$(green "get") "
  printf "  %s   Show all values\n" "$(green "list")"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

blincus_config_set_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config set - Save a value in the config file\n"
    echo

  else
    printf "blincus config set - Save a value in the config file\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config set KEY VALUE\n"
  printf "  blincus config set --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "KEY")"
    printf "    Config key\n"
    echo

    printf "  %s\n" "$(blue "VALUE")"
    printf "    Config value\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus set engine lxd\n"
    printf "  blincus set fedora.latest 40\n"
    echo

  fi
}

blincus_config_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config get - Read a value from the config file\n"
    echo

  else
    printf "blincus config get - Read a value from the config file\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config get KEY\n"
  printf "  blincus config get --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "KEY")"
    printf "    Config key\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus get engine\n"
    printf "  blincus get default_release\n"
    echo

  fi
}

blincus_config_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus config list - Show all values\n"
    echo

  else
    printf "blincus config list - Show all values\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus config list\n"
  printf "  blincus config list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

blincus_launch_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus launch\n"
    echo

    printf "  Launch a new instance\n  Use \`blincus template list\` to see a list of available templates.\n"
    echo

  else
    printf "blincus launch - Launch a new instance\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus launch NAME [OPTIONS]\n"
  printf "  blincus launch --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--template, -t TEMPLATE (required)")"
    printf "    Blincus template name \n    Use \`blincus template list\` to see available templates\n"
    echo

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "NAME")"
    printf "    Instance name\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus launch -t ubuntu mydevctr\n"
    printf "  blincus launch -t ubuntux mydevctr\n"
    printf "  blincus launch -t fedora mydevmachine\n"
    echo

    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

blincus_shell_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus shell - Open a shell in an instance\n"
    echo

  else
    printf "blincus shell - Open a shell in an instance\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus shell NAME [OPTIONS]\n"
  printf "  blincus shell --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--root, -r")"
    printf "    Root shell\n"
    echo

    printf "  %s\n" "$(magenta "--no-login, -n")"
    printf "    Don't use a login shell\n"
    echo

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "NAME")"
    printf "    Instance name\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus shell mydevctr --login\n"
    printf "  blincus shell mydevctr --root --no-login\n"
    printf "  blincus shell mydevctr\n"
    echo

    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

blincus_template_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template - Manage blincus templates\n"
    echo

  else
    printf "blincus template - Manage blincus templates\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template COMMAND\n"
  printf "  blincus template [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Edit a template\n" "$(green "edit")       "
  printf "  %s   List all templates\n" "$(green "list")       "
  printf "  %s   Personalize default templates\n" "$(green "personalize")"
  printf "  %s   Restore default templates\n" "$(green "restore")    "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

blincus_template_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template edit - Edit a template\n"
    echo

  else
    printf "blincus template edit - Edit a template\n"
    echo

  fi

  printf "Alias: e\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template edit NAME\n"
  printf "  blincus template edit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "NAME")"
    printf "    Template name\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus template edit ubuntu\n"
    echo

  fi
}

blincus_template_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template list - List all templates\n"
    echo

  else
    printf "blincus template list - List all templates\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template list [OPTIONS]\n"
  printf "  blincus template list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--completions, -c")"
    printf "    output as list for completions\n"
    echo

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

blincus_template_personalize_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template personalize - Personalize default templates\n"
    echo

  else
    printf "blincus template personalize - Personalize default templates\n"
    echo

  fi

  printf "Alias: p\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template personalize\n"
  printf "  blincus template personalize --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

blincus_template_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus template restore - Restore default templates\n"
    echo

  else
    printf "blincus template restore - Restore default templates\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus template restore\n"
  printf "  blincus template restore --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

blincus_custom_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus custom-image - Build custom images with distrobuilder\n"
    echo

  else
    printf "blincus custom-image - Build custom images with distrobuilder\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus custom-image COMMAND\n"
  printf "  blincus custom-image [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Build an image, requires \`distrobuilder\`\n" "$(green "build") "
  printf "  %s   Create custom image recipe and template\n" "$(green "create")"
  printf "  %s   List all image templates\n" "$(green "list")  "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "View documentation online at https://blincus.dev\n\n"
    echo

  fi
}

blincus_custom_image_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus custom-image build - Build an image, requires \`distrobuilder\`\n"
    echo

  else
    printf "blincus custom-image build - Build an image, requires \`distrobuilder\`\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus custom-image build NAME\n"
  printf "  blincus custom-image build --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "NAME")"
    printf "    Template name\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus custom-image build ubuntu\n"
    echo

  fi
}

blincus_custom_image_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus custom-image create - Create custom image recipe and template\n"
    echo

  else
    printf "blincus custom-image create - Create custom image recipe and template\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus custom-image create NAME [OPTIONS]\n"
  printf "  blincus custom-image create --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--template, -t TEMPLATE (required)")"
    printf "    Template to copy \n    Use \`blincus template list\` to see available templates\n"
    echo

    printf "  %s\n" "$(magenta "--scripts, -s SCRIPTS (required)")"
    printf "    Scripts directory to use\n"
    echo

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "NAME")"
    printf "    Template name\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  blincus custom-image create ubuntu -t ubuntu -s ubuntu\n"
    echo

  fi
}

blincus_custom_image_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "blincus custom-image list - List all image templates\n"
    echo

  else
    printf "blincus custom-image list - List all image templates\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  blincus custom-image list\n"
  printf "  blincus custom-image list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

config_show() {
  config_load
  ini_show
}

config_get() {
  local key="${1-}"
  local default_value="${2-}"

  config_load
  echo "${ini["$key"]:-$default_value}"
}

config_set() {
  local key="${1-}"
  shift
  local value="$*"

  config_load
  ini["$key"]="$value"
  config_save
}

config_del() {
  local key="${1-}"

  config_load
  unset "ini[$key]"
  config_save
}

config_keys() {
  config_load
  ini_keys
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

config_reload() {
  declare -g config_loaded=false
  config_load
}

config_load() {
  [[ "${config_loaded-}" == "true" ]] && return

  declare -g CONFIG_FILE=${CONFIG_FILE:=config.ini}
  declare -g config_loaded=true
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
  ini_load "$CONFIG_FILE"
}

config_save() {
  ini_save "$CONFIG_FILE"
}

write_defaults() {

  # default container engine
  config_set "engine" "incus"

  # ubuntu defaults
  config_set "ubuntu.image" "images:ubuntu/jammy/cloud"
  config_set "ubuntu.scripts" "ubuntu"

  config_set "ubuntux.image" "images:ubuntu/jammy/cloud"
  config_set "ubuntux.scripts" "ubuntu"
  # debian defaults
  config_set "debian.image" "images:debian/bookworm/cloud"
  config_set "debian.scripts" "debian"

  config_set "debianx.image" "images:debian/bookworm/cloud"
  config_set "debianx.scripts" "debian"

  #fedora defaults
  config_set "fedora.image" "images:fedora/39/cloud"
  config_set "fedora.scripts" "fedora"

  config_set "fedorax.image" "images:fedora/39/cloud"
  config_set "fedorax.scripts" "fedora"

  # nix defaults

  config_set "nix.image" "images:ubuntu/jammy/cloud"
  config_set "nix.scripts" "nix"
  # todo: flag or JIT set this
  # xhost +
}

ini_load() {
  declare -gA ini

  local ini_file="$1"

  local section=""
  local key=""
  local value=""
  local section_regex="^\[(.+)\]"
  local key_regex="^([^ =]+) *= *(.*) *$"
  local comment_regex="^;"

  while IFS= read -r line; do
    if [[ $line =~ $comment_regex ]]; then
      continue
    elif [[ $line =~ $section_regex ]]; then
      section="${BASH_REMATCH[1]}."
    elif [[ $line =~ $key_regex ]]; then
      key="${BASH_REMATCH[1]}"
      value="${BASH_REMATCH[2]}"
      [[ $value == *\$* ]] && eval "value=\"$value\""
      ini["${section}${key}"]="$value"
    fi
  done <"$ini_file"
}

ini_save() {
  declare -gA ini

  local ini_file="$1"

  local current_section=""
  local has_free_keys=false

  rm -f "$ini_file"

  for key in $(ini_keys); do
    [[ $key == *.* ]] && continue
    has_free_keys=true
    value="${ini[$key]}"
    echo "$key = $value" >>"$ini_file"
  done

  [[ "${has_free_keys}" == "true" ]] && echo >>"$ini_file"

  for key in $(ini_keys); do
    [[ $key == *.* ]] || continue
    value="${ini[$key]}"
    IFS="." read -r section_name key_name <<<"$key"

    if [[ "$current_section" != "$section_name" ]]; then
      [[ $current_section ]] && echo >>"$ini_file"
      echo "[$section_name]" >>"$ini_file"
      current_section="$section_name"
    fi

    echo "$key_name = $value" >>"$ini_file"
  done
}

ini_show() {
  declare -gA ini

  for key in $(ini_keys); do
    echo "$key = ${ini[$key]}"
  done
}

ini_keys() {
  declare -gA ini

  local keys=("${!ini[@]}")
  for a in "${keys[@]}"; do echo "$a"; done | sort
}

personalize() {

cfgdir=$(dirname "${CONFIG_FILE}")

template_path="${cfgdir}/templates"

for file in $template_path/*.config.yaml; do

    fullname=$(getent passwd "$USER" | cut -d ':' -f 5)
    sed -i "s/BLINCUSUSER/$USER/g" "$file"
    sed -i "s/BLINCUSFULLNAME/$fullname/g" "$file"

    # if we're running on WSL we need to remove the gecos line from the config
    # https://wsl.dev/wslblincus/
    if grep -qE "(Microsoft|WSL)" /proc/version &> /dev/null ; then
        sed -i 's/gecos/#gecos/g' "$file"
    fi

# I don't know a better way to get the first file
    for i in "$HOME"/.ssh/id*.pub; do
        [ -f "$i" ] || break
        contents=$(cat "$i")
        sed -i "s|SSHKEY|$contents|g" "$file"
        break

    done
done
}

prefix() {
    # find the path where `blincus` is located and use that as the prefix
    # default to /usr/local if not found
    local prefix
    prefix=$(dirname "$(dirname "$(command -v blincus)")")
    [ -z "${prefix}" ] && prefix="/usr/local"
    echo "${prefix}"
}

sanity() {
    local errors;

if ! grep -q 'root:1000:1' /etc/subgid; then

 errors=1;
 echo "Error: 'root:1000:1' missing from /etc/subgid";
 echo "To resolve run:"
 echo 'echo "root:1000:1" | sudo tee -a /etc/subuid /etc/subgid'
fi

if ! grep -q 'root:1000:1' /etc/subuid; then

    errors=1;
    echo "Error: 'root:1000:1' missing from /etc/subuid";
    echo "To resolve run:"
    echo 'echo "root:1000:1" | sudo tee -a /etc/subuid /etc/subgid'
fi

if ! groups $USER | grep -qw 'incus-admin' ; then
    errors=1;
    echo "Error: User does not belong to 'incus-admin' group.";
    echo "To resolve run:"
    echo 'sudo usermod -aG $USER'
fi
if (( errors > 0 )); then
   echo "$(red Sanity check failed.)"
   echo "$(yellow See documentation at https://blincus.dev)"
   exit 1;
fi
}

blincus_config_set_command() {
  # Using the standard library (lib/config.sh) to store a value to the config
  config_set "${args[key]}" "${args[value]}"
  config_show

}

blincus_config_get_command() {
  key="${args[key]}"
  if config_has_key "$key"; then
    config_get "$key"
  else
    echo "No such key: $key"
  fi
}

blincus_config_list_command() {
  for key in $(config_keys); do
    echo "$key: $(config_get "$key")"
  done
}

blincus_launch_command() {

  nomount=${args[--no-mount]}
  cfgdir=$(dirname "${CONFIG_FILE}")
  name=${args[name]}
  template=${args[--template]}

  image=$(config_get ${template}.image)

  config="${cfgdir}/templates/${template}"
  echo "Using $(blue ${template}) template"
  incus init "${image}" "${args[name]}" < "${config}.config.yaml"

  echo "$(yellow Starting instance $name)"
  # add our useful scripts
  # mount or copy scripts
  scripts=$(config_get ${template}.scripts)
  scriptdir="${cfgdir}/scripts/${scripts}"

  incus file push -r -p "$scriptdir"/* "$name"/opt/scripts/

  # now start it
  incus start "${args[name]}"

  echo "$(yellow Waiting for cloud init...)"

  # wait for cloud-init to create the user
  # otherwise the home mount will prevent /etc/skel from being applied
  incus exec "${args[name]}" -- bash -c "command -v cloud-init && cloud-init status --wait || echo No cloud-init"

  TMPFILE=$(mktemp)
  echo " * Blincus instance: $(red $name)" > $TMPFILE
  echo " * Template: $(red $template)" >> $TMPFILE
  echo " * Image: $(red $image)" >> $TMPFILE
  echo " * Helper Scripts: $(red /opt/scripts)" >> $TMPFILE
  echo " " >> $TMPFILE

  incus file push $TMPFILE "$name"/etc/blincus
  MOTDPROFILE=$(mktemp)
  echo "cat /etc/blincus" > $MOTDPROFILE

  incus file push $MOTDPROFILE "$name"/etc/profile.d/02-blincus.sh

  # mount $HOME at $HOME/host

  if [[ ! $nomount ]]; then
      echo "$(yellow Mounting home directory)"
      incus config device add "${args[name]}" myhomedir disk source="$HOME" path=/home/"${USER}"/host/
  fi
  if [[ ! -z "${DISPLAY}" ]]; then
      echo "$(yellow_bold Allowing X sharing:)"
      xhost +
  fi
  echo "$(green_bold Instance $name ready)"
  echo "Run $(magenta_bold blincus shell $name) to enter"

}

blincus_shell_command() {
  root=${args[--root]}
  nologin=${args[--no-login]}
  container=${args[name]}
  shelluser=${USER}
  loginflag="--login"

  if [[  $root ]]; then
      shelluser="root"
  fi
  if [[  $nologin ]]; then
      loginflag=""
  fi

  incus exec "$container" -- su ${loginflag} ${shelluser}

}

blincus_template_edit_command() {

  cfgdir=$(dirname "${CONFIG_FILE}")

  template_path="${cfgdir}/templates"
  $EDITOR ${template_path}/${args[name]}.config.yaml
}

blincus_template_list_command() {
  comp=${args[--completions]}

  cfgdir=$(dirname "${CONFIG_FILE}")

  template_path="${cfgdir}/templates"

  if [[  $comp ]]; then
      templates=()
      for file in $template_path/*.config.yaml; do
          name="$(basename "${file}" .config.yaml)"
          templates+=( $name )
      done
      echo ${templates[@]}
      return
  fi

  for file in $template_path/*.config.yaml; do
      name="$(basename "${file}" .config.yaml)"
  	echo "$(blue_bold $name)"
      echo "  $(grep "description" ${file})"

  done
}

blincus_template_personalize_command() {

  personalize
  echo "$(green Template personalization complete.)"

}

blincus_template_restore_command() {
  cfgdir=$(dirname "${CONFIG_FILE}")

  template_path="${cfgdir}/templates"

  templateDir="$(prefix)/share/blincus/templates"
  echo "$(blue Installer template directory:) $templateDir"
  echo "$(blue User template directory:) $template_path"
  echo ""
  echo "$(red To restore a template copy the template from the installer directory to the user directory)"
}

blincus_custom_image_build_command() {

  cfgdir=$(dirname "${CONFIG_FILE}")
  name=${args[name]}
  scriptdir=${args[--scripts]}
  sourcetemplate=${args[--template]}

  recipe="${cfgdir}/build/${name}.yaml"

  # ensure distrobuilder is installed
  if ! command -v distrobuilder >/dev/null; then
      echo "$(red distrobuilder) is not installed, or is not in your PATH. Please install it and try again."
      exit 1
  fi

  if ! command -v debootstrap >/dev/null; then
      echo "$(yellow debootstrap) is not installed, or is not in your PATH. Many recipes require it."
  fi
  # create build directory
  builddir="${cfgdir}/build/${name}"
  mkdir -p "${builddir}"

  # ensure recipe exists
  if [ ! -e "${recipe}" ]; then
      echo "Build recipe $(red ${recipe}) does not exist"
      exit 1
  fi

  echo "Using $(blue ${recipe}) recipe"

  sudo distrobuilder build-incus "${recipe}" ${builddir}

  # now import it
  echo "Importing image"
  sudo incus image import "${builddir}/incus.tar.xz" "${builddir}/rootfs.squashfs" builder=blincus --alias "builder-${name}"

  echo "Image $(blue builder-${name}) imported"

}

blincus_custom_image_create_command() {

  cfgdir=$(dirname "${CONFIG_FILE}")
  name=${args[name]}
  scriptdir=${args[--scripts]}
  sourcetemplate=${args[--template]}

  recipe="${cfgdir}/build/${name}.yaml"

  # ensure sourcetemplate exists
  if [ ! -e "${cfgdir}/templates/${sourcetemplate}.config.yaml" ]; then
      echo "Source template $(red ${sourcetemplate}) does not exist"
      exit 1
  fi

  # ensure recipe exists
  touch "${recipe}"

  # ensure scriptdir exists
  if [ ! -e "${cfgdir}/scripts/${scriptdir}" ]; then
      echo "Script directory $(red ${scriptdir}) does not exist"
      exit 1
  fi

  # Create config values for this image
  config_set "builder-${name}.image" "builder-${name}"
  config_set "builder-${name}.scripts" "${scriptdir}"

  # copy image template
  cp "${cfgdir}/templates/${sourcetemplate}.config.yaml" "${cfgdir}/templates/builder-${name}.config.yaml"

  echo "Created $(blue ${recipe}) recipe"
  echo "Created $(blue ${cfgdir}/templates/builder-${name}.config.yaml) template"
  echo "$(yellow Next Steps:)"
  echo " * Edit $(blue ${recipe}) with a valid Distrobuilder recipe"
  echo " * See examples in $(blue ${cfgdir}/build) for inspiration"
  echo " * Run $(magenta_bold blincus custom-image build ${name}) to build the image"
}

blincus_custom_image_list_command() {
  cfgdir=$(dirname "${CONFIG_FILE}")

  recipedir="${cfgdir}/build/"

  echo "$(red Custom) image build recipes:"
  for t in ${recipedir}*.yaml; do
      template=$(basename "${t}" .yaml)
      echo "  $(blue $template)" "- ${t}"
  done

  echo "$(red Custom) images (built):"
  for image in $(incus image list --format json | jq -r '.[] | select(.properties.builder == "blincus") | select(.aliases !=[]) | .aliases[0].name '); do
      echo "  $(blue $image)"
  done

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        blincus_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  export CONFIG_FILE="${CONFIG_FILE:-$HOME/.config/blincus/config.ini}"

  if command -v incus >/dev/null 2>&1; then
    deps['incus']="$(command -v incus | head -n1)"
  else
    printf "missing dependency: incus\n" >&2
    printf "%s\n" "incus is required to use blincus." >&2
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    config)
      action="config"
      shift
      blincus_config_parse_requirements "$@"
      shift $#
      ;;

    launch | l)
      action="launch"
      shift
      blincus_launch_parse_requirements "$@"
      shift $#
      ;;

    shell | s)
      action="shell"
      shift
      blincus_shell_parse_requirements "$@"
      shift $#
      ;;

    template)
      action="template"
      shift
      blincus_template_parse_requirements "$@"
      shift $#
      ;;

    custom-image)
      action="custom-image"
      shift
      blincus_custom_image_parse_requirements "$@"
      shift $#
      ;;

    "")
      blincus_usage >&2
      exit 1
      ;;

    *)
      if [[ -x "$(command -v "incus")" ]]; then
        exec incus "$@"
      else
        printf "invalid command: %s\n" "$action" >&2
        exit 1
      fi
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_config_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    set | s)
      action="set"
      shift
      blincus_config_set_parse_requirements "$@"
      shift $#
      ;;

    get | g)
      action="get"
      shift
      blincus_config_get_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      blincus_config_list_parse_requirements "$@"
      shift $#
      ;;

    "")
      blincus_config_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_config_set_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_set_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="config set"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['key']+x} ]]; then

          args['key']=$1
          shift
        elif [[ -z ${args['value']+x} ]]; then

          args['value']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['key']+x} ]]; then
    printf "missing required argument: KEY\nusage: blincus config set KEY VALUE\n" >&2
    exit 1
  fi
  if [[ -z ${args['value']+x} ]]; then
    printf "missing required argument: VALUE\nusage: blincus config set KEY VALUE\n" >&2
    exit 1
  fi

}

blincus_config_get_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="config get"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['key']+x} ]]; then

          args['key']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['key']+x} ]]; then
    printf "missing required argument: KEY\nusage: blincus config get KEY\n" >&2
    exit 1
  fi

}

blincus_config_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_config_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="config list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_launch_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_launch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="launch"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --template | -t)

        if [[ -n ${2+x} ]]; then

          args['--template']="$2"
          shift
          shift
        else
          printf "%s\n" "--template requires an argument: --template, -t TEMPLATE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus launch NAME [OPTIONS]\n" >&2
    exit 1
  fi

  if [[ -z ${args['--template']+x} ]]; then
    printf "missing required flag: --template, -t TEMPLATE\n" >&2
    exit 1
  fi

}

blincus_shell_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_shell_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="shell"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --root | -r)

        args['--root']=1
        shift
        ;;

      --no-login | -n)

        args['--no-login']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus shell NAME [OPTIONS]\n" >&2
    exit 1
  fi

}

blincus_template_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    edit | e)
      action="edit"
      shift
      blincus_template_edit_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      blincus_template_list_parse_requirements "$@"
      shift $#
      ;;

    personalize | p)
      action="personalize"
      shift
      blincus_template_personalize_parse_requirements "$@"
      shift $#
      ;;

    restore | r)
      action="restore"
      shift
      blincus_template_restore_parse_requirements "$@"
      shift $#
      ;;

    "")
      blincus_template_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_template_edit_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template edit"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus template edit NAME\n" >&2
    exit 1
  fi

}

blincus_template_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --completions | -c)

        args['--completions']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_template_personalize_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_personalize_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template personalize"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_template_restore_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_template_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template restore"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_custom_image_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_custom_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    build | b)
      action="build"
      shift
      blincus_custom_image_build_parse_requirements "$@"
      shift $#
      ;;

    create | c)
      action="create"
      shift
      blincus_custom_image_create_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      blincus_custom_image_list_parse_requirements "$@"
      shift $#
      ;;

    "")
      blincus_custom_image_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

blincus_custom_image_build_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_custom_image_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="custom-image build"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus custom-image build NAME\n" >&2
    exit 1
  fi

}

blincus_custom_image_create_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_custom_image_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="custom-image create"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --template | -t)

        if [[ -n ${2+x} ]]; then

          args['--template']="$2"
          shift
          shift
        else
          printf "%s\n" "--template requires an argument: --template, -t TEMPLATE" >&2
          exit 1
        fi
        ;;

      --scripts | -s)

        if [[ -n ${2+x} ]]; then

          args['--scripts']="$2"
          shift
          shift
        else
          printf "%s\n" "--scripts requires an argument: --scripts, -s SCRIPTS" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: blincus custom-image create NAME [OPTIONS]\n" >&2
    exit 1
  fi

  if [[ -z ${args['--template']+x} ]]; then
    printf "missing required flag: --template, -t TEMPLATE\n" >&2
    exit 1
  fi
  if [[ -z ${args['--scripts']+x} ]]; then
    printf "missing required flag: --scripts, -s SCRIPTS\n" >&2
    exit 1
  fi

}

blincus_custom_image_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        blincus_custom_image_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="custom-image list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

initialize() {
  version="0.2.0"
  long_usage=''
  set -e

  export CONFIG_FILE="${CONFIG_FILE:-$HOME/.config/blincus/config.ini}"

  cfgdir=$(dirname "${CONFIG_FILE}")
  [[ -d "$cfgdir" ]] || mkdir -p "$cfgdir"
  if ! test -f "${CONFIG_FILE:-}"; then
    echo "$(yellow_bold Config file does not exist. Creating it with defaults.)"
    echo "$(yellow_bold Disabling XAuth controls.)"
    write_defaults
    echo "--> Config file created at ${CONFIG_FILE}."
  fi
  sanity
  personalize
}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "config") blincus_config_command ;;
    "config set") blincus_config_set_command ;;
    "config get") blincus_config_get_command ;;
    "config list") blincus_config_list_command ;;
    "launch") blincus_launch_command ;;
    "shell") blincus_shell_command ;;
    "template") blincus_template_command ;;
    "template edit") blincus_template_edit_command ;;
    "template list") blincus_template_list_command ;;
    "template personalize") blincus_template_personalize_command ;;
    "template restore") blincus_template_restore_command ;;
    "custom-image") blincus_custom_image_command ;;
    "custom-image build") blincus_custom_image_build_command ;;
    "custom-image create") blincus_custom_image_create_command ;;
    "custom-image list") blincus_custom_image_list_command ;;
  esac
}

initialize
run "$@"
